/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module pausing_counter_9 (
    input clk,
    input rst,
    input b,
    input [4:0] sel,
    output reg [4:0] outp
  );
  
  
  
  reg [4:0] M_register_d, M_register_q = $signed(2'h3);
  
  wire [5-1:0] M_rca_out;
  reg [5-1:0] M_rca_a;
  reg [5-1:0] M_rca_b;
  rca_five_18 rca (
    .a(M_rca_a),
    .b(M_rca_b),
    .out(M_rca_out)
  );
  
  wire [(3'h5+0)-1:0] M_mux_out;
  reg [(3'h5+0)-1:0] M_mux_s;
  reg [(3'h5+0)-1:0] M_mux_a;
  reg [(3'h5+0)-1:0] M_mux_b;
  
  genvar GEN_mux0;
  generate
  for (GEN_mux0=0;GEN_mux0<3'h5;GEN_mux0=GEN_mux0+1) begin: mux_gen_0
    mux_2_5 mux (
      .s(M_mux_s[GEN_mux0*(1)+(1)-1-:(1)]),
      .a(M_mux_a[GEN_mux0*(1)+(1)-1-:(1)]),
      .b(M_mux_b[GEN_mux0*(1)+(1)-1-:(1)]),
      .out(M_mux_out[GEN_mux0*(1)+(1)-1-:(1)])
    );
  end
  endgenerate
  
  reg [4:0] rcaout;
  
  integer i;
  
  always @* begin
    M_register_d = M_register_q;
    
    M_rca_b = 5'h01;
    M_rca_a = M_register_q;
    rcaout = M_rca_out;
    outp = rcaout;
    for (i = 1'h0; i < 3'h5; i = i + 1) begin
      M_mux_a[(i)*1+0-:1] = rcaout[(i)*1+0-:1];
      M_mux_b[(i)*1+0-:1] = b;
      M_mux_s[(i)*1+0-:1] = sel[(i)*1+0-:1];
      M_register_d[(i)*1+0-:1] = M_mux_out[(i)*1+0-:1];
    end
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_register_q <= $signed(2'h3);
    end else begin
      M_register_q <= M_register_d;
    end
  end
  
endmodule
