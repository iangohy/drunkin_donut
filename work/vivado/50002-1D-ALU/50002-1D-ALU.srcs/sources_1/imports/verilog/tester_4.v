/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module tester_4 (
    input clk,
    input rst,
    input force_error,
    input pausing_counter_reset,
    output reg [4:0] counter,
    output reg [1:0] error,
    output reg [15:0] debugSum
  );
  
  
  
  
  localparam INIT_testerfsm = 5'd0;
  localparam ADD1_testerfsm = 5'd1;
  localparam ADD2_testerfsm = 5'd2;
  localparam SUB1_testerfsm = 5'd3;
  localparam SUB2_testerfsm = 5'd4;
  localparam MUL1_testerfsm = 5'd5;
  localparam MUL2_testerfsm = 5'd6;
  localparam AND_testerfsm = 5'd7;
  localparam OR_testerfsm = 5'd8;
  localparam XOR_testerfsm = 5'd9;
  localparam A_testerfsm = 5'd10;
  localparam SHL1_testerfsm = 5'd11;
  localparam SHL2_testerfsm = 5'd12;
  localparam SHR1_testerfsm = 5'd13;
  localparam SHR2_testerfsm = 5'd14;
  localparam SRA1_testerfsm = 5'd15;
  localparam CMPEQ_testerfsm = 5'd16;
  localparam CMPLT_testerfsm = 5'd17;
  localparam CMPLE_testerfsm = 5'd18;
  localparam INC1_testerfsm = 5'd19;
  localparam INC2_testerfsm = 5'd20;
  localparam DEC_testerfsm = 5'd21;
  localparam NAND_testerfsm = 5'd22;
  localparam NOR_testerfsm = 5'd23;
  localparam XNOR_testerfsm = 5'd24;
  localparam B_testerfsm = 5'd25;
  localparam END_testerfsm = 5'd26;
  
  reg [4:0] M_testerfsm_d, M_testerfsm_q = INIT_testerfsm;
  
  wire [1-1:0] M_slowClock_value;
  counter_8 slowClock (
    .clk(clk),
    .rst(rst),
    .value(M_slowClock_value)
  );
  
  wire [5-1:0] M_fsmcounter_outp;
  reg [1-1:0] M_fsmcounter_b;
  reg [5-1:0] M_fsmcounter_sel;
  pausing_counter_9 fsmcounter (
    .clk(M_slowClock_value),
    .rst(rst),
    .b(M_fsmcounter_b),
    .sel(M_fsmcounter_sel),
    .outp(M_fsmcounter_outp)
  );
  
  wire [1-1:0] M_slowClockEdge_out;
  reg [1-1:0] M_slowClockEdge_in;
  edge_detector_10 slowClockEdge (
    .clk(clk),
    .in(M_slowClockEdge_in),
    .out(M_slowClockEdge_out)
  );
  
  wire [16-1:0] M_alu16_out;
  wire [3-1:0] M_alu16_zvn;
  reg [6-1:0] M_alu16_alufn;
  reg [1-1:0] M_alu16_alufn_6;
  reg [16-1:0] M_alu16_a;
  reg [16-1:0] M_alu16_b;
  alu_7 alu16 (
    .alufn(M_alu16_alufn),
    .alufn_6(M_alu16_alufn_6),
    .a(M_alu16_a),
    .b(M_alu16_b),
    .out(M_alu16_out),
    .zvn(M_alu16_zvn)
  );
  
  wire [60-1:0] M_testerrom_testcase;
  reg [5-1:0] M_testerrom_address;
  tester_rom_11 testerrom (
    .address(M_testerrom_address),
    .testcase(M_testerrom_testcase)
  );
  
  reg [59:0] romdata;
  
  reg [15:0] processed_out;
  
  always @* begin
    M_testerfsm_d = M_testerfsm_q;
    
    M_fsmcounter_b = 5'h1f;
    M_fsmcounter_sel = {3'h5{pausing_counter_reset}};
    M_slowClockEdge_in = M_fsmcounter_outp[0+0-:1];
    counter = M_fsmcounter_outp;
    error = 1'h0;
    M_testerrom_address = 1'h0;
    M_alu16_a = 1'h0;
    M_alu16_b = 1'h0;
    M_alu16_alufn = 1'h0;
    M_alu16_alufn_6 = 1'h0;
    debugSum = M_alu16_out;
    if (M_fsmcounter_outp == 5'h00) begin
      M_testerfsm_d = INIT_testerfsm;
    end
    
    case (M_testerfsm_q)
      INIT_testerfsm: begin
        if (M_slowClockEdge_out == 1'h1) begin
          M_testerfsm_d = ADD1_testerfsm;
        end
      end
      ADD1_testerfsm: begin
        M_testerrom_address = M_fsmcounter_outp;
        romdata = M_testerrom_testcase;
        M_alu16_a = romdata[44+15-:16];
        M_alu16_b = romdata[28+15-:16];
        M_alu16_alufn = romdata[20+5-:6];
        M_alu16_alufn_6 = 1'h0;
        processed_out = M_alu16_out;
        if (force_error == 1'h1) begin
          processed_out[0+0-:1] = !processed_out[0+0-:1];
        end
        if (processed_out == romdata[4+15-:16] && M_alu16_zvn == romdata[0+2-:3]) begin
          error = 2'h0;
        end else begin
          if (processed_out != romdata[4+15-:16]) begin
            error = 2'h1;
          end else begin
            if (M_alu16_zvn != romdata[0+2-:3]) begin
              error = 2'h2;
            end else begin
              error = 2'h3;
            end
          end
        end
        if (M_slowClockEdge_out == 1'h1) begin
          M_testerfsm_d = ADD2_testerfsm;
        end
      end
      ADD2_testerfsm: begin
        M_testerrom_address = M_fsmcounter_outp;
        romdata = M_testerrom_testcase;
        M_alu16_a = romdata[44+15-:16];
        M_alu16_b = romdata[28+15-:16];
        M_alu16_alufn = romdata[20+5-:6];
        M_alu16_alufn_6 = 1'h0;
        processed_out = M_alu16_out;
        if (force_error == 1'h1) begin
          processed_out[0+0-:1] = !processed_out[0+0-:1];
        end
        if (processed_out == romdata[4+15-:16] && M_alu16_zvn == romdata[0+2-:3]) begin
          error = 2'h0;
        end else begin
          if (processed_out != romdata[4+15-:16]) begin
            error = 2'h1;
          end else begin
            if (M_alu16_zvn != romdata[0+2-:3]) begin
              error = 2'h2;
            end else begin
              error = 2'h3;
            end
          end
        end
        if (M_slowClockEdge_out == 1'h1) begin
          M_testerfsm_d = SUB1_testerfsm;
        end
      end
      SUB1_testerfsm: begin
        M_testerrom_address = M_fsmcounter_outp;
        romdata = M_testerrom_testcase;
        M_alu16_a = romdata[44+15-:16];
        M_alu16_b = romdata[28+15-:16];
        M_alu16_alufn = romdata[20+5-:6];
        M_alu16_alufn_6 = 1'h0;
        processed_out = M_alu16_out;
        if (force_error == 1'h1) begin
          processed_out[0+0-:1] = !processed_out[0+0-:1];
        end
        if (processed_out == romdata[4+15-:16] && M_alu16_zvn == romdata[0+2-:3]) begin
          error = 2'h0;
        end else begin
          if (processed_out != romdata[4+15-:16]) begin
            error = 2'h1;
          end else begin
            if (M_alu16_zvn != romdata[0+2-:3]) begin
              error = 2'h2;
            end else begin
              error = 2'h3;
            end
          end
        end
        if (M_slowClockEdge_out == 1'h1) begin
          M_testerfsm_d = SUB2_testerfsm;
        end
      end
      SUB2_testerfsm: begin
        M_testerrom_address = M_fsmcounter_outp;
        romdata = M_testerrom_testcase;
        M_alu16_a = romdata[44+15-:16];
        M_alu16_b = romdata[28+15-:16];
        M_alu16_alufn = romdata[20+5-:6];
        M_alu16_alufn_6 = 1'h0;
        processed_out = M_alu16_out;
        if (force_error == 1'h1) begin
          processed_out[0+0-:1] = !processed_out[0+0-:1];
        end
        if (processed_out == romdata[4+15-:16] && M_alu16_zvn == romdata[0+2-:3]) begin
          error = 2'h0;
        end else begin
          if (processed_out != romdata[4+15-:16]) begin
            error = 2'h1;
          end else begin
            if (M_alu16_zvn != romdata[0+2-:3]) begin
              error = 2'h2;
            end else begin
              error = 2'h3;
            end
          end
        end
        if (M_slowClockEdge_out == 1'h1) begin
          M_testerfsm_d = MUL1_testerfsm;
        end
      end
      MUL1_testerfsm: begin
        M_testerrom_address = M_fsmcounter_outp;
        romdata = M_testerrom_testcase;
        M_alu16_a = romdata[44+15-:16];
        M_alu16_b = romdata[28+15-:16];
        M_alu16_alufn = romdata[20+5-:6];
        M_alu16_alufn_6 = 1'h0;
        processed_out = M_alu16_out;
        if (force_error == 1'h1) begin
          processed_out[0+0-:1] = !processed_out[0+0-:1];
        end
        if (processed_out == romdata[4+15-:16] && M_alu16_zvn == romdata[0+2-:3]) begin
          error = 2'h0;
        end else begin
          if (processed_out != romdata[4+15-:16]) begin
            error = 2'h1;
          end else begin
            if (M_alu16_zvn != romdata[0+2-:3]) begin
              error = 2'h2;
            end else begin
              error = 2'h3;
            end
          end
        end
        if (M_slowClockEdge_out == 1'h1) begin
          M_testerfsm_d = MUL2_testerfsm;
        end
      end
      MUL2_testerfsm: begin
        M_testerrom_address = M_fsmcounter_outp;
        romdata = M_testerrom_testcase;
        M_alu16_a = romdata[44+15-:16];
        M_alu16_b = romdata[28+15-:16];
        M_alu16_alufn = romdata[20+5-:6];
        M_alu16_alufn_6 = 1'h0;
        processed_out = M_alu16_out;
        if (force_error == 1'h1) begin
          processed_out[0+0-:1] = !processed_out[0+0-:1];
        end
        if (processed_out == romdata[4+15-:16] && M_alu16_zvn == romdata[0+2-:3]) begin
          error = 2'h0;
        end else begin
          if (processed_out != romdata[4+15-:16]) begin
            error = 2'h1;
          end else begin
            if (M_alu16_zvn != romdata[0+2-:3]) begin
              error = 2'h2;
            end else begin
              error = 2'h3;
            end
          end
        end
        if (M_slowClockEdge_out == 1'h1) begin
          M_testerfsm_d = AND_testerfsm;
        end
      end
      AND_testerfsm: begin
        M_testerrom_address = M_fsmcounter_outp;
        romdata = M_testerrom_testcase;
        M_alu16_a = romdata[44+15-:16];
        M_alu16_b = romdata[28+15-:16];
        M_alu16_alufn = romdata[20+5-:6];
        M_alu16_alufn_6 = 1'h0;
        processed_out = M_alu16_out;
        if (force_error == 1'h1) begin
          processed_out[0+0-:1] = !processed_out[0+0-:1];
        end
        if (processed_out == romdata[4+15-:16] && M_alu16_zvn == romdata[0+2-:3]) begin
          error = 2'h0;
        end else begin
          if (processed_out != romdata[4+15-:16]) begin
            error = 2'h1;
          end else begin
            if (M_alu16_zvn != romdata[0+2-:3]) begin
              error = 2'h2;
            end else begin
              error = 2'h3;
            end
          end
        end
        if (M_slowClockEdge_out == 1'h1) begin
          M_testerfsm_d = OR_testerfsm;
        end
      end
      OR_testerfsm: begin
        M_testerrom_address = M_fsmcounter_outp;
        romdata = M_testerrom_testcase;
        M_alu16_a = romdata[44+15-:16];
        M_alu16_b = romdata[28+15-:16];
        M_alu16_alufn = romdata[20+5-:6];
        M_alu16_alufn_6 = 1'h0;
        processed_out = M_alu16_out;
        if (force_error == 1'h1) begin
          processed_out[0+0-:1] = !processed_out[0+0-:1];
        end
        if (processed_out == romdata[4+15-:16] && M_alu16_zvn == romdata[0+2-:3]) begin
          error = 2'h0;
        end else begin
          if (processed_out != romdata[4+15-:16]) begin
            error = 2'h1;
          end else begin
            if (M_alu16_zvn != romdata[0+2-:3]) begin
              error = 2'h2;
            end else begin
              error = 2'h3;
            end
          end
        end
        if (M_slowClockEdge_out == 1'h1) begin
          M_testerfsm_d = XOR_testerfsm;
        end
      end
      XOR_testerfsm: begin
        M_testerrom_address = M_fsmcounter_outp;
        romdata = M_testerrom_testcase;
        M_alu16_a = romdata[44+15-:16];
        M_alu16_b = romdata[28+15-:16];
        M_alu16_alufn = romdata[20+5-:6];
        M_alu16_alufn_6 = 1'h0;
        processed_out = M_alu16_out;
        if (force_error == 1'h1) begin
          processed_out[0+0-:1] = !processed_out[0+0-:1];
        end
        if (processed_out == romdata[4+15-:16] && M_alu16_zvn == romdata[0+2-:3]) begin
          error = 2'h0;
        end else begin
          if (processed_out != romdata[4+15-:16]) begin
            error = 2'h1;
          end else begin
            if (M_alu16_zvn != romdata[0+2-:3]) begin
              error = 2'h2;
            end else begin
              error = 2'h3;
            end
          end
        end
        if (M_slowClockEdge_out == 1'h1) begin
          M_testerfsm_d = A_testerfsm;
        end
      end
      A_testerfsm: begin
        M_testerrom_address = M_fsmcounter_outp;
        romdata = M_testerrom_testcase;
        M_alu16_a = romdata[44+15-:16];
        M_alu16_b = romdata[28+15-:16];
        M_alu16_alufn = romdata[20+5-:6];
        M_alu16_alufn_6 = 1'h0;
        processed_out = M_alu16_out;
        if (force_error == 1'h1) begin
          processed_out[0+0-:1] = !processed_out[0+0-:1];
        end
        if (processed_out == romdata[4+15-:16] && M_alu16_zvn == romdata[0+2-:3]) begin
          error = 2'h0;
        end else begin
          if (processed_out != romdata[4+15-:16]) begin
            error = 2'h1;
          end else begin
            if (M_alu16_zvn != romdata[0+2-:3]) begin
              error = 2'h2;
            end else begin
              error = 2'h3;
            end
          end
        end
        if (M_slowClockEdge_out == 1'h1) begin
          M_testerfsm_d = SHL1_testerfsm;
        end
      end
      SHL1_testerfsm: begin
        M_testerrom_address = M_fsmcounter_outp;
        romdata = M_testerrom_testcase;
        M_alu16_a = romdata[44+15-:16];
        M_alu16_b = romdata[28+15-:16];
        M_alu16_alufn = romdata[20+5-:6];
        M_alu16_alufn_6 = 1'h0;
        processed_out = M_alu16_out;
        if (force_error == 1'h1) begin
          processed_out[0+0-:1] = !processed_out[0+0-:1];
        end
        if (processed_out == romdata[4+15-:16] && M_alu16_zvn == romdata[0+2-:3]) begin
          error = 2'h0;
        end else begin
          if (processed_out != romdata[4+15-:16]) begin
            error = 2'h1;
          end else begin
            if (M_alu16_zvn != romdata[0+2-:3]) begin
              error = 2'h2;
            end else begin
              error = 2'h3;
            end
          end
        end
        if (M_slowClockEdge_out == 1'h1) begin
          M_testerfsm_d = SHL2_testerfsm;
        end
      end
      SHL2_testerfsm: begin
        M_testerrom_address = M_fsmcounter_outp;
        romdata = M_testerrom_testcase;
        M_alu16_a = romdata[44+15-:16];
        M_alu16_b = romdata[28+15-:16];
        M_alu16_alufn = romdata[20+5-:6];
        M_alu16_alufn_6 = 1'h0;
        processed_out = M_alu16_out;
        if (force_error == 1'h1) begin
          processed_out[0+0-:1] = !processed_out[0+0-:1];
        end
        if (processed_out == romdata[4+15-:16] && M_alu16_zvn == romdata[0+2-:3]) begin
          error = 2'h0;
        end else begin
          if (processed_out != romdata[4+15-:16]) begin
            error = 2'h1;
          end else begin
            if (M_alu16_zvn != romdata[0+2-:3]) begin
              error = 2'h2;
            end else begin
              error = 2'h3;
            end
          end
        end
        if (M_slowClockEdge_out == 1'h1) begin
          M_testerfsm_d = SHR1_testerfsm;
        end
      end
      SHR1_testerfsm: begin
        M_testerrom_address = M_fsmcounter_outp;
        romdata = M_testerrom_testcase;
        M_alu16_a = romdata[44+15-:16];
        M_alu16_b = romdata[28+15-:16];
        M_alu16_alufn = romdata[20+5-:6];
        M_alu16_alufn_6 = 1'h0;
        processed_out = M_alu16_out;
        if (force_error == 1'h1) begin
          processed_out[0+0-:1] = !processed_out[0+0-:1];
        end
        if (processed_out == romdata[4+15-:16] && M_alu16_zvn == romdata[0+2-:3]) begin
          error = 2'h0;
        end else begin
          if (processed_out != romdata[4+15-:16]) begin
            error = 2'h1;
          end else begin
            if (M_alu16_zvn != romdata[0+2-:3]) begin
              error = 2'h2;
            end else begin
              error = 2'h3;
            end
          end
        end
        if (M_slowClockEdge_out == 1'h1) begin
          M_testerfsm_d = SHR2_testerfsm;
        end
      end
      SHR2_testerfsm: begin
        M_testerrom_address = M_fsmcounter_outp;
        romdata = M_testerrom_testcase;
        M_alu16_a = romdata[44+15-:16];
        M_alu16_b = romdata[28+15-:16];
        M_alu16_alufn = romdata[20+5-:6];
        M_alu16_alufn_6 = 1'h0;
        processed_out = M_alu16_out;
        if (force_error == 1'h1) begin
          processed_out[0+0-:1] = !processed_out[0+0-:1];
        end
        if (processed_out == romdata[4+15-:16] && M_alu16_zvn == romdata[0+2-:3]) begin
          error = 2'h0;
        end else begin
          if (processed_out != romdata[4+15-:16]) begin
            error = 2'h1;
          end else begin
            if (M_alu16_zvn != romdata[0+2-:3]) begin
              error = 2'h2;
            end else begin
              error = 2'h3;
            end
          end
        end
        if (M_slowClockEdge_out == 1'h1) begin
          M_testerfsm_d = SRA1_testerfsm;
        end
      end
      SRA1_testerfsm: begin
        M_testerrom_address = M_fsmcounter_outp;
        romdata = M_testerrom_testcase;
        M_alu16_a = romdata[44+15-:16];
        M_alu16_b = romdata[28+15-:16];
        M_alu16_alufn = romdata[20+5-:6];
        M_alu16_alufn_6 = 1'h0;
        processed_out = M_alu16_out;
        if (force_error == 1'h1) begin
          processed_out[0+0-:1] = !processed_out[0+0-:1];
        end
        if (processed_out == romdata[4+15-:16] && M_alu16_zvn == romdata[0+2-:3]) begin
          error = 2'h0;
        end else begin
          if (processed_out != romdata[4+15-:16]) begin
            error = 2'h1;
          end else begin
            if (M_alu16_zvn != romdata[0+2-:3]) begin
              error = 2'h2;
            end else begin
              error = 2'h3;
            end
          end
        end
        if (M_slowClockEdge_out == 1'h1) begin
          M_testerfsm_d = CMPEQ_testerfsm;
        end
      end
      CMPEQ_testerfsm: begin
        M_testerrom_address = M_fsmcounter_outp;
        romdata = M_testerrom_testcase;
        M_alu16_a = romdata[44+15-:16];
        M_alu16_b = romdata[28+15-:16];
        M_alu16_alufn = romdata[20+5-:6];
        M_alu16_alufn_6 = 1'h0;
        processed_out = M_alu16_out;
        if (force_error == 1'h1) begin
          processed_out[0+0-:1] = !processed_out[0+0-:1];
        end
        if (processed_out == romdata[4+15-:16] && M_alu16_zvn == romdata[0+2-:3]) begin
          error = 2'h0;
        end else begin
          if (processed_out != romdata[4+15-:16]) begin
            error = 2'h1;
          end else begin
            if (M_alu16_zvn != romdata[0+2-:3]) begin
              error = 2'h2;
            end else begin
              error = 2'h3;
            end
          end
        end
        if (M_slowClockEdge_out == 1'h1) begin
          M_testerfsm_d = CMPLT_testerfsm;
        end
      end
      CMPLT_testerfsm: begin
        M_testerrom_address = M_fsmcounter_outp;
        romdata = M_testerrom_testcase;
        M_alu16_a = romdata[44+15-:16];
        M_alu16_b = romdata[28+15-:16];
        M_alu16_alufn = romdata[20+5-:6];
        M_alu16_alufn_6 = 1'h0;
        processed_out = M_alu16_out;
        if (force_error == 1'h1) begin
          processed_out[0+0-:1] = !processed_out[0+0-:1];
        end
        if (processed_out == romdata[4+15-:16] && M_alu16_zvn == romdata[0+2-:3]) begin
          error = 2'h0;
        end else begin
          if (processed_out != romdata[4+15-:16]) begin
            error = 2'h1;
          end else begin
            if (M_alu16_zvn != romdata[0+2-:3]) begin
              error = 2'h2;
            end else begin
              error = 2'h3;
            end
          end
        end
        if (M_slowClockEdge_out == 1'h1) begin
          M_testerfsm_d = CMPLE_testerfsm;
        end
      end
      CMPLE_testerfsm: begin
        M_testerrom_address = M_fsmcounter_outp;
        romdata = M_testerrom_testcase;
        M_alu16_a = romdata[44+15-:16];
        M_alu16_b = romdata[28+15-:16];
        M_alu16_alufn = romdata[20+5-:6];
        M_alu16_alufn_6 = romdata[26+0-:1];
        processed_out = M_alu16_out;
        if (force_error == 1'h1) begin
          processed_out[0+0-:1] = !processed_out[0+0-:1];
        end
        if (processed_out == romdata[4+15-:16] && M_alu16_zvn == romdata[0+2-:3]) begin
          error = 2'h0;
        end else begin
          if (processed_out != romdata[4+15-:16]) begin
            error = 2'h1;
          end else begin
            if (M_alu16_zvn != romdata[0+2-:3]) begin
              error = 2'h2;
            end else begin
              error = 2'h3;
            end
          end
        end
        if (M_slowClockEdge_out == 1'h1) begin
          M_testerfsm_d = INC1_testerfsm;
        end
      end
      INC1_testerfsm: begin
        M_testerrom_address = M_fsmcounter_outp;
        romdata = M_testerrom_testcase;
        M_alu16_a = romdata[44+15-:16];
        M_alu16_b = romdata[28+15-:16];
        M_alu16_alufn = romdata[20+5-:6];
        M_alu16_alufn_6 = romdata[26+0-:1];
        processed_out = M_alu16_out;
        if (force_error == 1'h1) begin
          processed_out[0+0-:1] = !processed_out[0+0-:1];
        end
        if (processed_out == romdata[4+15-:16] && M_alu16_zvn == romdata[0+2-:3]) begin
          error = 2'h0;
        end else begin
          if (processed_out != romdata[4+15-:16]) begin
            error = 2'h1;
          end else begin
            if (M_alu16_zvn != romdata[0+2-:3]) begin
              error = 2'h2;
            end else begin
              error = 2'h3;
            end
          end
        end
        if (M_slowClockEdge_out == 1'h1) begin
          M_testerfsm_d = INC2_testerfsm;
        end
      end
      INC2_testerfsm: begin
        M_testerrom_address = M_fsmcounter_outp;
        romdata = M_testerrom_testcase;
        M_alu16_a = romdata[44+15-:16];
        M_alu16_b = romdata[28+15-:16];
        M_alu16_alufn = romdata[20+5-:6];
        M_alu16_alufn_6 = romdata[26+0-:1];
        processed_out = M_alu16_out;
        if (force_error == 1'h1) begin
          processed_out[0+0-:1] = !processed_out[0+0-:1];
        end
        if (processed_out == romdata[4+15-:16] && M_alu16_zvn == romdata[0+2-:3]) begin
          error = 2'h0;
        end else begin
          if (processed_out != romdata[4+15-:16]) begin
            error = 2'h1;
          end else begin
            if (M_alu16_zvn != romdata[0+2-:3]) begin
              error = 2'h2;
            end else begin
              error = 2'h3;
            end
          end
        end
        if (M_slowClockEdge_out == 1'h1) begin
          M_testerfsm_d = DEC_testerfsm;
        end
      end
      DEC_testerfsm: begin
        M_testerrom_address = M_fsmcounter_outp;
        romdata = M_testerrom_testcase;
        M_alu16_a = romdata[44+15-:16];
        M_alu16_b = romdata[28+15-:16];
        M_alu16_alufn = romdata[20+5-:6];
        M_alu16_alufn_6 = romdata[26+0-:1];
        processed_out = M_alu16_out;
        if (force_error == 1'h1) begin
          processed_out[0+0-:1] = !processed_out[0+0-:1];
        end
        if (processed_out == romdata[4+15-:16] && M_alu16_zvn == romdata[0+2-:3]) begin
          error = 2'h0;
        end else begin
          if (processed_out != romdata[4+15-:16]) begin
            error = 2'h1;
          end else begin
            if (M_alu16_zvn != romdata[0+2-:3]) begin
              error = 2'h2;
            end else begin
              error = 2'h3;
            end
          end
        end
        if (M_slowClockEdge_out == 1'h1) begin
          M_testerfsm_d = NAND_testerfsm;
        end
      end
      NAND_testerfsm: begin
        M_testerrom_address = M_fsmcounter_outp;
        romdata = M_testerrom_testcase;
        M_alu16_a = romdata[44+15-:16];
        M_alu16_b = romdata[28+15-:16];
        M_alu16_alufn = romdata[20+5-:6];
        M_alu16_alufn_6 = romdata[26+0-:1];
        processed_out = M_alu16_out;
        if (force_error == 1'h1) begin
          processed_out[0+0-:1] = !processed_out[0+0-:1];
        end
        if (processed_out == romdata[4+15-:16] && M_alu16_zvn == romdata[0+2-:3]) begin
          error = 2'h0;
        end else begin
          if (processed_out != romdata[4+15-:16]) begin
            error = 2'h1;
          end else begin
            if (M_alu16_zvn != romdata[0+2-:3]) begin
              error = 2'h2;
            end else begin
              error = 2'h3;
            end
          end
        end
        if (M_slowClockEdge_out == 1'h1) begin
          M_testerfsm_d = NOR_testerfsm;
        end
      end
      NOR_testerfsm: begin
        M_testerrom_address = M_fsmcounter_outp;
        romdata = M_testerrom_testcase;
        M_alu16_a = romdata[44+15-:16];
        M_alu16_b = romdata[28+15-:16];
        M_alu16_alufn = romdata[20+5-:6];
        M_alu16_alufn_6 = romdata[26+0-:1];
        processed_out = M_alu16_out;
        if (force_error == 1'h1) begin
          processed_out[0+0-:1] = !processed_out[0+0-:1];
        end
        if (processed_out == romdata[4+15-:16] && M_alu16_zvn == romdata[0+2-:3]) begin
          error = 2'h0;
        end else begin
          if (processed_out != romdata[4+15-:16]) begin
            error = 2'h1;
          end else begin
            if (M_alu16_zvn != romdata[0+2-:3]) begin
              error = 2'h2;
            end else begin
              error = 2'h3;
            end
          end
        end
        if (M_slowClockEdge_out == 1'h1) begin
          M_testerfsm_d = XNOR_testerfsm;
        end
      end
      XNOR_testerfsm: begin
        M_testerrom_address = M_fsmcounter_outp;
        romdata = M_testerrom_testcase;
        M_alu16_a = romdata[44+15-:16];
        M_alu16_b = romdata[28+15-:16];
        M_alu16_alufn = romdata[20+5-:6];
        M_alu16_alufn_6 = romdata[26+0-:1];
        processed_out = M_alu16_out;
        if (force_error == 1'h1) begin
          processed_out[0+0-:1] = !processed_out[0+0-:1];
        end
        if (processed_out == romdata[4+15-:16] && M_alu16_zvn == romdata[0+2-:3]) begin
          error = 2'h0;
        end else begin
          if (processed_out != romdata[4+15-:16]) begin
            error = 2'h1;
          end else begin
            if (M_alu16_zvn != romdata[0+2-:3]) begin
              error = 2'h2;
            end else begin
              error = 2'h3;
            end
          end
        end
        if (M_slowClockEdge_out == 1'h1) begin
          M_testerfsm_d = B_testerfsm;
        end
      end
      B_testerfsm: begin
        M_testerrom_address = M_fsmcounter_outp;
        romdata = M_testerrom_testcase;
        M_alu16_a = romdata[44+15-:16];
        M_alu16_b = romdata[28+15-:16];
        M_alu16_alufn = romdata[20+5-:6];
        M_alu16_alufn_6 = romdata[26+0-:1];
        processed_out = M_alu16_out;
        if (force_error == 1'h1) begin
          processed_out[0+0-:1] = !processed_out[0+0-:1];
        end
        if (processed_out == romdata[4+15-:16] && M_alu16_zvn == romdata[0+2-:3]) begin
          error = 2'h0;
        end else begin
          if (processed_out != romdata[4+15-:16]) begin
            error = 2'h1;
          end else begin
            if (M_alu16_zvn != romdata[0+2-:3]) begin
              error = 2'h2;
            end else begin
              error = 2'h3;
            end
          end
        end
        if (M_slowClockEdge_out == 1'h1) begin
          M_testerfsm_d = END_testerfsm;
        end
      end
      END_testerfsm: begin
        counter = 8'hff;
        error = 1'h0;
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_testerfsm_q <= 1'h0;
    end else begin
      M_testerfsm_q <= M_testerfsm_d;
    end
  end
  
endmodule
