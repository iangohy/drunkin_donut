/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module alu_control_3 (
    input clk,
    input rst,
    input buttonNext,
    input [7:0] inputMoreSig,
    input [7:0] inputLessSig,
    output reg [15:0] out,
    output reg [2:0] zvn,
    output reg [2:0] state
  );
  
  
  
  
  localparam IDLE_alufsm = 3'd0;
  localparam SETA_alufsm = 3'd1;
  localparam SETB_alufsm = 3'd2;
  localparam SETALUFN_alufsm = 3'd3;
  localparam OUTPUT_alufsm = 3'd4;
  
  reg [2:0] M_alufsm_d, M_alufsm_q = IDLE_alufsm;
  
  reg [15:0] M_a_dff_d, M_a_dff_q = 1'h0;
  
  reg [15:0] M_b_dff_d, M_b_dff_q = 1'h0;
  
  reg [6:0] M_alufn_dff_d, M_alufn_dff_q = 1'h0;
  
  wire [1-1:0] M_goNextState_out;
  reg [1-1:0] M_goNextState_in;
  edge_detector_6 goNextState (
    .clk(clk),
    .in(M_goNextState_in),
    .out(M_goNextState_out)
  );
  
  wire [16-1:0] M_alu16_out;
  wire [3-1:0] M_alu16_zvn;
  reg [6-1:0] M_alu16_alufn;
  reg [1-1:0] M_alu16_alufn_6;
  reg [16-1:0] M_alu16_a;
  reg [16-1:0] M_alu16_b;
  alu_7 alu16 (
    .alufn(M_alu16_alufn),
    .alufn_6(M_alu16_alufn_6),
    .a(M_alu16_a),
    .b(M_alu16_b),
    .out(M_alu16_out),
    .zvn(M_alu16_zvn)
  );
  
  always @* begin
    M_alufsm_d = M_alufsm_q;
    M_a_dff_d = M_a_dff_q;
    M_b_dff_d = M_b_dff_q;
    M_alufn_dff_d = M_alufn_dff_q;
    
    M_a_dff_d = M_a_dff_q;
    M_b_dff_d = M_b_dff_q;
    M_alufn_dff_d = M_alufn_dff_q;
    M_goNextState_in = buttonNext;
    out = 16'h0000;
    M_alu16_a = 16'h0000;
    M_alu16_b = 16'h0000;
    M_alu16_alufn = 5'h00;
    M_alu16_alufn_6 = 1'h0;
    state = 3'h0;
    zvn = M_alu16_zvn;
    
    case (M_alufsm_q)
      IDLE_alufsm: begin
        M_a_dff_d = 16'h0000;
        M_b_dff_d = 16'h0000;
        M_alufn_dff_d = 16'h0000;
        state = 3'h0;
        if (M_goNextState_out == 1'h1) begin
          M_alufsm_d = SETA_alufsm;
        end
      end
      SETA_alufsm: begin
        M_a_dff_d[8+7-:8] = inputMoreSig;
        M_a_dff_d[0+7-:8] = inputLessSig;
        state = 3'h1;
        if (M_goNextState_out == 1'h1) begin
          M_alufsm_d = SETB_alufsm;
        end
      end
      SETB_alufsm: begin
        M_b_dff_d[8+7-:8] = inputMoreSig;
        M_b_dff_d[0+7-:8] = inputLessSig;
        state = 3'h2;
        if (M_goNextState_out == 1'h1) begin
          M_alufsm_d = SETALUFN_alufsm;
        end
      end
      SETALUFN_alufsm: begin
        M_alufn_dff_d[0+5-:6] = inputLessSig[0+5-:6];
        M_alufn_dff_d[6+0-:1] = inputLessSig[6+0-:1];
        state = 3'h3;
        if (M_goNextState_out == 1'h1) begin
          M_alufsm_d = OUTPUT_alufsm;
        end
      end
      OUTPUT_alufsm: begin
        M_alu16_a = M_a_dff_q;
        M_alu16_b = M_b_dff_q;
        M_alu16_alufn = M_alufn_dff_q[0+5-:6];
        M_alu16_alufn_6 = M_alufn_dff_q[6+0-:1];
        state = 3'h4;
        out = M_alu16_out;
        if (M_goNextState_out == 1'h1) begin
          M_alufsm_d = SETA_alufsm;
        end
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_a_dff_q <= 1'h0;
    end else begin
      M_a_dff_q <= M_a_dff_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_b_dff_q <= 1'h0;
    end else begin
      M_b_dff_q <= M_b_dff_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_alufsm_q <= 1'h0;
    end else begin
      M_alufsm_q <= M_alufsm_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_alufn_dff_q <= 1'h0;
    end else begin
      M_alufn_dff_q <= M_alufn_dff_d;
    end
  end
  
endmodule
