/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module alu_7 (
    input [5:0] alufn,
    input alufn_6,
    input [15:0] a,
    input [15:0] b,
    output reg [15:0] out,
    output reg [2:0] zvn
  );
  
  
  
  wire [16-1:0] M_adder16_out;
  wire [1-1:0] M_adder16_z;
  wire [1-1:0] M_adder16_v;
  wire [1-1:0] M_adder16_n;
  reg [16-1:0] M_adder16_a;
  reg [16-1:0] M_adder16_b;
  reg [1-1:0] M_adder16_alufn;
  reg [1-1:0] M_adder16_alufn6;
  add_sub_12 adder16 (
    .a(M_adder16_a),
    .b(M_adder16_b),
    .alufn(M_adder16_alufn),
    .alufn6(M_adder16_alufn6),
    .out(M_adder16_out),
    .z(M_adder16_z),
    .v(M_adder16_v),
    .n(M_adder16_n)
  );
  
  wire [1-1:0] M_compare16_c;
  reg [1-1:0] M_compare16_z;
  reg [1-1:0] M_compare16_v;
  reg [1-1:0] M_compare16_n;
  reg [3-1:0] M_compare16_alufn;
  compare_13 compare16 (
    .z(M_compare16_z),
    .v(M_compare16_v),
    .n(M_compare16_n),
    .alufn(M_compare16_alufn),
    .c(M_compare16_c)
  );
  
  wire [16-1:0] M_bool16_out;
  reg [16-1:0] M_bool16_a;
  reg [16-1:0] M_bool16_b;
  reg [6-1:0] M_bool16_alufn;
  boolean_14 bool16 (
    .a(M_bool16_a),
    .b(M_bool16_b),
    .alufn(M_bool16_alufn),
    .out(M_bool16_out)
  );
  
  wire [16-1:0] M_shift16_s;
  reg [16-1:0] M_shift16_a;
  reg [4-1:0] M_shift16_b;
  reg [2-1:0] M_shift16_alufn;
  shifter_15 shift16 (
    .a(M_shift16_a),
    .b(M_shift16_b),
    .alufn(M_shift16_alufn),
    .s(M_shift16_s)
  );
  
  wire [16-1:0] M_mult16_p;
  reg [16-1:0] M_mult16_a;
  reg [16-1:0] M_mult16_b;
  multiplier_16 mult16 (
    .a(M_mult16_a),
    .b(M_mult16_b),
    .p(M_mult16_p)
  );
  
  wire [(5'h10+0)-1:0] M_mux2_out;
  reg [(5'h10+0)-1:0] M_mux2_s;
  reg [(5'h10+0)-1:0] M_mux2_a;
  reg [(5'h10+0)-1:0] M_mux2_b;
  
  genvar GEN_mux20;
  generate
  for (GEN_mux20=0;GEN_mux20<5'h10;GEN_mux20=GEN_mux20+1) begin: mux2_gen_0
    mux_2_5 mux2 (
      .s(M_mux2_s[GEN_mux20*(1)+(1)-1-:(1)]),
      .a(M_mux2_a[GEN_mux20*(1)+(1)-1-:(1)]),
      .b(M_mux2_b[GEN_mux20*(1)+(1)-1-:(1)]),
      .out(M_mux2_out[GEN_mux20*(1)+(1)-1-:(1)])
    );
  end
  endgenerate
  
  wire [16-1:0] M_mux4_out;
  reg [2-1:0] M_mux4_s;
  reg [16-1:0] M_mux4_a;
  reg [16-1:0] M_mux4_b;
  reg [16-1:0] M_mux4_c;
  reg [16-1:0] M_mux4_d;
  mux_4_17 mux4 (
    .s(M_mux4_s),
    .a(M_mux4_a),
    .b(M_mux4_b),
    .c(M_mux4_c),
    .d(M_mux4_d),
    .out(M_mux4_out)
  );
  
  reg [15:0] s;
  
  reg [15:0] cmp;
  
  reg [15:0] boole;
  
  reg [15:0] shift;
  
  reg [15:0] mult;
  
  reg [15:0] miniMuxRes;
  
  always @* begin
    M_adder16_alufn = alufn[0+0-:1];
    M_adder16_a = a;
    M_adder16_b = b;
    M_adder16_alufn6 = alufn_6;
    s = M_adder16_out;
    zvn[2+0-:1] = M_adder16_z;
    zvn[1+0-:1] = M_adder16_v;
    zvn[0+0-:1] = M_adder16_n;
    M_compare16_z = M_adder16_z;
    M_compare16_v = M_adder16_v;
    M_compare16_n = M_adder16_n;
    M_compare16_alufn = alufn[0+2-:3];
    cmp[1+14-:15] = 1'h0;
    cmp[0+0-:1] = M_compare16_c;
    M_bool16_a = a;
    M_bool16_b = b;
    M_bool16_alufn = alufn[0+3-:4];
    boole = M_bool16_out;
    M_shift16_a = a;
    M_shift16_b = b[0+3-:4];
    M_shift16_alufn = alufn[0+1-:2];
    shift = M_shift16_s;
    M_mult16_a = a;
    M_mult16_b = b;
    mult = M_mult16_p;
    M_mux2_s = {5'h10{alufn[1+0-:1]}};
    M_mux2_a = s;
    M_mux2_b = mult;
    miniMuxRes = M_mux2_out;
    M_mux4_s = alufn[4+1-:2];
    M_mux4_a = miniMuxRes;
    M_mux4_b = shift;
    M_mux4_c = boole;
    M_mux4_d = cmp;
    out = M_mux4_out;
  end
endmodule
