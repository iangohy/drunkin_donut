module au_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input usb_rx,           // USB->Serial input
    output usb_tx,          // USB->Serial output
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    /*
    output multi_sev[8],
    output multi_sel[4],
    output circle_led[30],
    input reset_button,
    */
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8]     // DIP switches on IO Shield
  ) {
  
  sig rst;                  // reset signal
  // simple_fsm simple(.clk(clk),.rst(rst));  button_conditioner btn_condition(.clk(clk));
  /*
  circle_clock test_clock(.clk(clk), .rst(rst));
  dff test[8](.clk(clk), .rst(rst));
  dff testspeed[3](.clk(clk), .rst(rst));
     */
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    button_conditioner p1_btn_cond;
    button_conditioner p2_btn_cond;
    button_conditioner rst_btn_cond;
    edge_detector p1_btn_edge(#RISE(1), #FALL(0));
    edge_detector p2_btn_edge(#RISE(1), #FALL(0));
    edge_detector rst_btn_edge(#RISE(1), #FALL(0));
    .rst(rst) {
        beta game_beta;
    }

  }
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    usb_tx = usb_rx;        // loop serial port
    
    led = 8h00;             // turn LEDs off
    
    io_led = 3x{{8h00}};    // turn LEDs off
    io_seg = 8hff;          // turn segments off
    io_sel = 4hf;           // select no digits
    
    /* Simple fsm to test hardware
    simple.buttonNext = reset_button;
    circle_led[14:0] = simple.ledleft;
    circle_led[29:15] = simple.ledright;
    multi_sel = simple.out_7segsel;
    multi_sev = simple.out_7seg;
    */
    
    /* Code to test circle_clock
    p1_btn_cond.in = io_button[0];
    button_edge.in = p1_btn_cond.out;
    test_clock.speed = testspeed.q;
    if (button_edge.out == b1) {
      testspeed.d = testspeed.q + 1;
    }
    io_led[0] = testspeed.q;
    io_led[1] = test_clock.debug_counter;
    if (test_clock.out == b1) {
      test.d = test.q + 1;
    }
    io_led[2] = test.q;
    */
    
    // Test with Alchitry IO
    p1_btn_cond.in = io_button[0];
    p2_btn_cond.in = io_button[1];
    rst_btn_cond.in = io_button[2];
    p1_btn_edge.in  = p1_btn_cond.out;
    p2_btn_edge.in = p2_btn_cond.out;
    rst_btn_edge.in = rst_btn_cond.out;
    game_beta.p1_button = p1_btn_edge.out;
    game_beta.p2_button = p2_btn_edge.out;
    game_beta.reset_button = rst_btn_edge.out;
    
    
    io_led[2] = game_beta.countdown_timer_val[7:0];
    io_led[1] = game_beta.circle_left[15:8];
    io_led[0] = game_beta.circle_left[7:0];
    
    
        
  }
}


