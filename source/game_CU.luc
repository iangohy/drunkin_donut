module game_CU (
    input clk,  // clock
    input rst,  // reset
    input increase_counter, // need to implement
    input decrease_timer, // need to implement
    input increase_speed, // need to implement
    input regfile_datain[16], //direct reading of regfile data from read_address_b
    
    //3 buttons
    input p1_button,
    input p2_button,
    input reset_button,
    
    //30 LEDS
    output ledleft[15],
    output ledright[15],
    
    //the 3 7 segments?
    output out_7seg_p1[8], // 7 seg for score display on p1?
    output out_7segsel_p1[4],
    
    output out_7seg_p2[8],//7 seg for score display on p2?
    output out_7segsel_p2[4],
      
    output out_7seg_timer[8],//7 seg for timer display?
    output out_7segsel_timer[4],

    output alufn[7], // alufn 7 bits
    output asel[2], // asel 2 bits
    output bsel[2], // bsel 2 bits
    output wdsel[3], // wdsel 3 its 
    output regfile_write_address[4], // rc 4 bits
    output regfile_read_address_a[4], // ra 4 bits
    output regfile_read_address_b[4], // rb 4 bits
    output we_regfile,// we
    output decimal_counter_reset, // timer
    output decimal_counter_increase,
    output decimal_speed_reset, // speed 
    output decimal_speed_increase,
       
    output debug[4] //?
  ) {
    .clk(clk){
      fsm game_fsm={
        RESET_SPEED, // start state
        RESET_P1_SCORE, // grey balls
        RESET_P2_SCORE,
        RESET_RIGHT_HALF,
        RESET_LEFT_HALF,
        RESET_TIMER,
        BRANCH_CHECK_SPEED,
        READY,
        SET_COUNT_TO_3, // blue balls (before game starts)
        INCREASE_SPEED,
        COUNTDOWN,
        SET_COUNT_TO_60,
        IDLE, // IDLE
        SHL_RIGHT_HALF, // red balls
        SHL_LEFT_LEFT,
        CHECK_MSB_RIGHT_HALF,
        CMPEQ_RIGHT,
        BRANCH_CMPEQ_RIGHT,
        PLUS1_TI_RIGHT_HALF,
        CHECK_MSB_LEFT_HALF,
        CMPEQ_LEFT,
        BRANCH_CMPEQ_LEFT,
        PLUS1_TO_LEFT_HALF,
        CHECK_ANY_LED_FIRST_HALF_NOT_LIT, // black balls
        CHECK_ANY_LED_SECOND_HALF_NOT_LIT,
        CMPEQ_FIRST_HALF,
        BRANCH_FIRST_HALF,
        CMPLE_SECOND_HALF,
        BRANCH_SECOND_HALF,
        CHECK_P2_LOSE, // check p2
        BRANCH_P2_LOSE_OR_CARRYON,
        P2_LED_LIGHT_UP,
        P2_SCORE_INCREASE_BY_1,
        CHECK_P1_LOSE, // check p1
        BRANCH_P1_LOSE_OR_CARRYON,
        P1_LED_LIGHT_UP,
        P1_SCORE_INCREASE_BY_1,
        CHECK_COUNT_MORETHAN_0, //blue balls (game starts)
        BRANCH_TIMER,
        COUNT_MINUS_1,
        CHECK_DRAW, // purple balls
        BRANCH_DRAW,
        DRAW,
        CHECK_WINNER,
        BRANCH_WINNER,
        P1_WINS,
        P2_LOSES,
        LIGHT_LOWER_LEFT_LED,
        LIGHT_UPPER_RIGHT_LED,
        P2_WINS,
        P1_LOSES,
        LIGHT_UPPER_LEFT_LED,
        LIGHT_LOWER_RIGHT_LED,
        GAMEOVER
        };
  }

  always {
    
    // standard setting unless otherwise overwritten by each case 
    alufn = 0;
    asel = 0; 
    bsel = 0;
    we_regfile = 0;
    regfile_write_address = 1111;
    regfile_read_address_a = 0000;
    regfile_read_address_b = 0000;
    wdsel = 0;
    
    
    debug = 0000;
    
    decimal_counter_increase = 0;
    decimal_counter_reset = 0;
    decimal_speed_increase = 0;
    decimal_speed_reset = 0;      
    
    if (rst){
        game_fsm.d = game_fsm.RESET_SPEED;
        decimal_speed_reset = 1;
    }
    else{
      
        
    case(game_fsm.q){
        game_fsm.RESET_SPEED:            
          we_regfile = b1;
          regfile_write_address = 4h5;
          wdsel = 4h4;
          game_fsm.d = game_fsm.RESET_P1_SCORE;
        
                       
        game_fsm.RESET_P1_SCORE:            
          we_regfile = 1;
          regfile_write_address = 4h3;
          wdsel = 4h4;
          game_fsm.d = game_fsm.RESET_P2_SCORE;
             
        game_fsm.RESET_P2_SCORE:            
          we_regfile = b1;
          regfile_write_address = 4h4;
          wdsel = 4h4;
          game_fsm.d = game_fsm.RESET_RIGHT_HALF;
                        
        game_fsm.RESET_RIGHT_HALF:            
          we_regfile = b1;
          regfile_write_address = 4h1;
          wdsel = 4h4;
          game_fsm.d = game_fsm.RESET_LEFT_HALF;
                        
        game_fsm.RESET_LEFT_HALF:            
          we_regfile = b1;
          regfile_write_address = 4h0;
          wdsel = 4h4;
          game_fsm.d = game_fsm.RESET_TIMER;    
                    
        game_fsm.RESET_TIMER:            
          we_regfile = b1;
          regfile_write_address = 4h2;
          wdsel = 4h4;
          game_fsm.d = game_fsm.BRANCH_CHECK_SPEED;      
                  
        game_fsm.BRANCH_CHECK_SPEED:            
          we_regfile = b0;
          regfile_read_address_b = 4h5;
            
          if (~regfile_datain[0]){  // if rb_data ==0
            game_fsm.d = game_fsm.SET_COUNT_TO_3;
            }
          else{
            game_fsm.d = game_fsm.READY;            
            }
            
        game_fsm.READY:            
          we_regfile = b0;

          game_fsm.d = game_fsm.SET_COUNT_TO_3;    
                      
        game_fsm.RESET_TIMER:            
          we_regfile = b1;
          regfile_write_address = 4h2;
          wdsel = 4h4;
          game_fsm.d = game_fsm.BRANCH_CHECK_SPEED;              
            
            
            
            
            
            
            
            
                          
            }
        
          
        
      }
        
      
  }
}
