module automanual (
    input clk,  // clock
    input rst,  // reset
    input buttonNext,
    input inputMoreSig[8],
    input inputLessSig[8],
    input force_error, // forcefully flips LSB of ALU output (s)
    input reset_counter, //resets and switches off the auto mode 
    output out[16],
    output misc_states[8]
  ) {
  
  alu_control manual(.clk(clk), .rst(rst));
  tester auto(.clk(clk),.rst(rst));
  mux_2 zvn_sel[8];
  mux_2 mode_sel[16];
  sig manual_out[16];
  sig manual_zvn[3];
  sig manual_state[3];
  sig combine_zs[8];
  
  sig auto_sum[16];
  sig auto_counter[5];
  sig auto_error[2];
  sig combine_c[8];
  var i;
  
  always {
    // manual side
    manual.inputMoreSig=inputMoreSig;
    manual.inputLessSig=inputLessSig;
    manual.buttonNext=buttonNext;
    manual_out=manual.out;
    manual_zvn=manual.zvn;
    manual_state=manual.state;
    combine_zs[2:0]=manual_state;
    combine_zs[7:5]=manual_zvn;
    combine_zs[4:3]=2b00;
    
    // auto side
    auto.pausing_counter_reset=reset_counter;
    auto.force_error=force_error;
    auto_sum=auto.debugSum;
    auto_counter=auto.counter;
    auto_error = auto.error;
    combine_c[4:0] = auto.counter;
    combine_c[7:6] = auto_error;
    combine_c[5] = b0;
    
    // add in multiplexer for output sum
    for (i=0;i<16;i++){
      mode_sel.a[i] = auto_sum[i];
      mode_sel.b[i] = manual_out[i];
      mode_sel.s[i] = reset_counter;
      out[i] = mode_sel.out[i];
    }
    
    // add in multiplexers to account for zvn, error, state
    for (i=0; i<8; i++){
      zvn_sel.a[i] = combine_c[i];
      zvn_sel.b[i] = combine_zs[i];
      zvn_sel.s[i] = reset_counter;
      misc_states[i] = zvn_sel.out[i];
      
    }
    
  }
}
