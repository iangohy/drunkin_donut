module tester_rom (
    input address[5],     // Address of test case
    output testcase[60]   // A[59:44] B[43:28] ALUFN[27:20] ALU[19:4] zvn[3:0]


  ) {

  // Reverse left-right order from states!
  // {ADD2,ADD1}
  const TESTADD = {60hFFFF8000007FFF2,60h800000010080011};
  // {SUB2,SUB1}
  const TESTSUB = {60h80007FFF0100012,60hFFFFFFFF0100004};
  // {MUL2,MUL1}
  const TESTMUL = {60hFFFF020002FE000,60h0000FFFF0200001};
  // {A,XOR,OR,AND}
  const TESTBOOL = {60h555511111A55550,60hFFFF555516AAAA0,60hFFFF00001EFFFF1,60hFFFFFFFF18FFFF1};
  // {SRA1,SHR2,SHR1,SHL2,SHL1}
  const TESTSHIFT = {60hFFFF001F23FFFF1,60hFFFFFFFF2100014,60hFFFF001F2100011,60hFFFFFFFF2080001,60hFFFF000F2080000};
  // {CMPLE,CMPLT,CMPEQ}
  const TESTCOMP = {60h555555553700014,60h555555553500004,60h555555553300014};
  // {DEC,INC2, INC1}
  const TESTINCR = {60h0001FFFF4100004,60h7FFF00014080003,60h0000FFFF4000010};
  // {B, XNOR, NOR, NAND}
  const TESTBOOL2={60h0001FFFF15FFFF0,60h5555AAAA1900003,60h0000555511AAAA1,60hFF00555517AAFF1};
  // ROM address 0 not used (1 indexing for test cases)
  const TESTS = c{TESTBOOL2,TESTINCR,TESTCOMP,TESTSHIFT,TESTBOOL,TESTMUL,TESTSUB,TESTADD,{60h0}};

  always {
    testcase = TESTS[address];
  }
}
