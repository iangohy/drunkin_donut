module circle_clock (
    input clk,  // clock
    input rst,  // reset
    input speed[16],
    output out,
    output debug_counter[8]
  ) {
  
  // ~0.02s
  counter freq_divider(.rst(rst), .clk(clk), #SIZE(1),#DIV(23));
  edge_detector edge_rise (.clk(clk), #RISE(1), #FALL(0));
  dff ctr[8](.clk(clk), .rst(rst));

  always {
    edge_rise.in = freq_divider.value;
    debug_counter = ctr.q;
    
    if (edge_rise.out == b1) {
      // increase ctr
      ctr.d = ctr.q + 1; 
    }
    
    case(speed) {
      b1:    
        // level 1
        // 64 counts
        if (ctr.q == h40) {
          out = b1;
          ctr.d = b0;
        } else if (ctr.q > h40) {
          ctr.d = b0;
          out = b0;
        } else {
          out = b0;
        }
        
      b10:
        // level 2 
        // 12 counts
        if (ctr.q == hC) {
          out = b1;
          ctr.d = b0;
        } else if (ctr.q > hC) {
          ctr.d = b0;
          out = b0;
        } else {
          out = b0;
        }
        
      b11:
        // level 3
        // 9 counts
        if (ctr.q == h9) {
          out = b1;
          ctr.d = b0;
        } else if (ctr.q > h9) {
          ctr.d = b0;
          out = b0;
        } else {
          out = b0;
        }
        
      b100:
        // level 4
        // 6 counts
        // 0.336s
        if (ctr.q == h6) {
          out = b1;
          ctr.d = b0;
        } else if (ctr.q > h6) {
          ctr.d = b0;
          out = b0;
        } else {
          out = b0;
        }
        
      default:
        // level 5 (and above)
        // 3 counts
        // 0.251s
        if (ctr.q == h3) {
          out = b1;
          ctr.d = b0;
        } else if (ctr.q > h3) {
          ctr.d = b0;
          out = b0;
        } else {
          out = b0;
        }
        
    }
        
  }
}
