module factorial (
    input clk,  // clock
    input rst,
    input a[16],  //we use only a to key in value
    output f[16]
  ) {
  
    multiplier multiplier;
  
   .clk(clk), .rst(rst) {
    fsm state = {START, MULTIPLY, FINISH};
    dff counterdff[16];
    dff loaddff[16];
    
      }
  

  var unsigneda;
  sig mout[16];
 
  
  always {
    f = 0;
    loaddff.d = loaddff.q;
    counterdff.d = counterdff.q;
    unsigneda = $unsigned(a);
    
    multiplier.a = loaddff.q;
    multiplier.b = counterdff.q;
    mout = multiplier.p;

    
    case(state.q) {
      default:              // stores states fsm
      f = 0;     
      state.START:
        loaddff.d = 1;
        counterdff.d = 1;
        
      state.MULTIPLY:  //what do i do when im in multiply state
        loaddff.d = mout;  // so 8! instead of 8x7x6...1 we doing 8x1x2x3x4x5x6x7
        
        
      state.FINISH:
        counterdff.d = counterdff.q;
        f = loaddff.q;
      
        
        
      if (unsigneda == 0) {
        state.d = state.FINISH;
          }
      else {
        state.d = state.MULTIPLY;
          }
      
        
      if (counterdff.q == unsigneda) {
              state.d = state.FINISH;
          }
      else {
            
          counterdff.d = counterdff.q + 1;
          }
 
      }    
    
  }
}